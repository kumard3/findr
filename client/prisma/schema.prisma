datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id        String   @id @default(cuid())
    email     String   @unique
    name      String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Authentication
    password   String? // Hashed password
    provider   String? // e.g., "google", "github"
    providerId String? // External provider ID

    // Subscription and Usage
    tierId  String? // Link to Tier model
    tier    Tier?   @relation(fields: [tierId], references: [id])
    used    Int     @default(0) // Documents indexed
    storage Int     @default(0) // Bytes used

    // Billing
    customerId         String?
    subscriptionId     String?
    subscriptionStatus String? // "active", "canceled", "past_due"
    trialEndsAt        DateTime?

    // Relations
    apiKeys     ApiKey[]
    collections Collection[]
    usageLogs   UsageLog[]
    documents   Document[] // New relation to Document model
    accounts    Account[]
    sessions    Session[]

    @@index([email])
    @@index([tierId])
}

model Document {
    id        String   @id
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    content   Json
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId])
    @@index([id])
}

model ApiKey {
    id        String    @id @default(cuid())
    value     String    @unique
    name      String?
    userId    String
    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    status    String    @default("active") // "active", "revoked", "expired"
    createdAt DateTime  @default(now())
    expiresAt DateTime?
    lastUsed  DateTime?

    // Rate Limiting
    rateLimit    Int @default(100) // Requests per minute
    requestCount Int @default(0)

    // Permissions (consolidated)
    permissions String[] // e.g., ["search", "write", "delete"]

    // Restrictions
    ipRestrictions String[] @default([])

    usageLogs UsageLog[]

    @@index([value])
    @@index([userId])
    @@index([status])
}

model Collection {
    id        String   @id @default(cuid())
    name      String
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Metrics
    documentCount Int @default(0)
    storageSize   Int @default(0) // Bytes

    // Schema and Settings
    schema   Json? // Typesense schema
    settings Json? // Typesense settings

    usageLogs UsageLog[]

    @@unique([userId, name])
    @@index([userId])
}

model UsageLog {
    id           String      @id @default(cuid())
    userId       String
    user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    collectionId String?
    collection   Collection? @relation(fields: [collectionId], references: [id], onDelete: SetNull)
    apiKeyId     String?
    apiKey       ApiKey?     @relation(fields: [apiKeyId], references: [id], onDelete: SetNull)

    // Operation Details
    operation    String // "search", "index", "delete"
    timestamp    DateTime @default(now())
    status       String // "success", "failed"
    errorMessage String?

    // Metrics
    documentsProcessed Int?
    processingTime     Float? // Milliseconds, allows decimals
    dataSize           Int? // Bytes

    // Request Details
    ipAddress String?
    userAgent String?

    @@index([userId])
    @@index([collectionId])
    @@index([apiKeyId])
    @@index([timestamp])
    @@index([operation])
}

model Tier {
    id       String @id @default(cuid())
    name     String @unique // "free", "pro", "enterprise"
    price    Float
    currency String @default("USD")
    interval String @default("month") // "month", "year"

    // Limits
    documentLimit  Int
    storageLimit   Int // Bytes
    searchesPerDay Int
    apiKeys        Int
    collections    Int

    // Features
    features  String[]
    users     User[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name])
}

model BillingHistory {
    id        String    @id @default(cuid())
    userId    String
    amount    Float
    currency  String    @default("USD")
    status    String // "paid", "pending", "failed"
    provider  String // "stripe", "paypal"
    invoiceId String?
    createdAt DateTime  @default(now())
    paidAt    DateTime?

    @@index([userId])
    @@index([status])
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    expires      DateTime
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}


